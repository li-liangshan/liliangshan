#!/usr/bin/env bash

########################## 打印:p 命令 ##########################
# 默认打印全部，匹配的行重复打印一次
sed '/north/g' ../../resources/sed_test.txt

# 只打印匹配行 -n
sed -n '/north/g' ../../resources/sed_test.txt

########################## 删除:d 命令 ##########################
# 删除某一行d
sed '3d' ../../resources/sed_test.txt

# 删除从第三行到最后一行内容，剩余各行被打印。地址范围是开始第 3 行，结束最后一行。
sed '3,$d' ../../resources/sed_test.txt
sed '/north/d' ../../resources/sed_test.txt # 所有包含模式 north 的行都被动删除，其余行被打印

########################## 替换:s 命令 ##########################
#|---------------------------------------------------------------------------------------------------------------------|
#|----                                                                                                             ----|
#|紧跟在 s 命令后的字符就是查找串和替换串之间的分隔符。分隔符默认默认为正斜杠， 但可以改变。无论什么字符(换行符，反斜线除外)，          |
#|只要紧跟在s命令，就成了新的串分隔符。这个方法在查找包含正斜杠模式时很管用，例如查找路径名或生日.                                   |
#|----                                                                                                             ----|
#|---------------------------------------------------------------------------------------------------------------------|

# 命令 s 是替换命令。替换和取代文件中的文本可以通过 sed 中的 s 来实现，s 后包含在 斜杠中的文本是正则表达式，后面跟着的是需要替换的文本。
# 可以通过 g 标志对行进行全局 替换
sed 's/west/north/g' ../../resources/sed_test.txt
# s 命令用于替换。命令末端的 g 表示在行内全局替换;也就是说如果每一行里出现多个 west，所有的 west 都会被替换为 north。如果没有 g 命令，
# 则只将每一行的第一 west 替换 为 north。
sed -n 's/^west/north/p' ../../resources/sed_test.txt
# s 命令用于替换。选线-n 与命令行末尾的标志 p 结合，告诉 sed 只打印发生替换的那些行;
# 也就是说，如果只有在行首找到 west 并替换成 north 时才会打印此行。
sed 's/[0-9][0-9]$/&.5/' ../../resources/sed_test.txt
# 当“与”符号(&)用在替换串中时，它代表在查找串中匹配到的内容时。这个示例中 所有以 2 位数结尾的行后面都被加上.5。

sed 's/\(Mar\)got/\1linanne/p' ../../resources/sed_test.txt
# 包含在圆括号里的模式 Mar 作为标签 1 保存在特定的寄存器中。替换串可以通过\1 来 引用它。则 Margot 被替换为 Marlinane。

########################## 指定行的范围:逗号 ##########################
# 行的范围从文件中的一个地址开始，在另一个地址结束。地址范围可以是行号(例如 5,10)，正则表达式(例如/Dick/和/Joe/)，
# 或者两者的结合(例如/north/,$)范围是闭合的 ——包含开始条件的行，结束条件的行，以及两者之间的行。如果结束条件无法满足，
# 就会 一直操作到文件结尾。如果结束条件满足，则继续查找满足开始条件的位置，范围重新开始。
sed -n '/west/,/east/p'  ../../resources/sed_test.txt
# 打印模式 west 和 east 之间所有的行。如果 west 出现在 east 之后的某一行，则打印的 范围从 west 所在行开始，到下一个出现 east
# 的行或文件的末尾(如果前者未出现)。图中 用箭头表示出了该范围。

sed -n '5,/northeast/p' ../../resources/sed_test.txt
# 打印从第 5 行开始第一个以 northeast 开头的行之间的所有行。

sed '/west/,/east/s/$/**VACA**/' ../../resources/sed_test.txt
# 修改从模式 wast 和 east 之间的所有行，将各行的行尾($)替换为字符串**VACA**。换行 符被移到新的字符串后面。

########################## 多重编辑:e 命令 ##########################
# -e 命令是编辑命令，用于 sed 执行多个编辑任务的情况下。在下一行开始编辑前，所有 的编辑动作将应用到模式缓存区的行上。
sed -e '1,3d' -e 's/Hemenway/Jones/' ../../resources/sed_test.txt
# 说明:选项-e 用于进行多重编辑。第一重编辑编辑删除第 1~3 行。第二重编辑将 Hemenway 替换为 Jones。
# 因为是逐行进行这两行编辑(即这两个命令都在模式空间的当前 行上执行)，所以编辑命令的顺序会影响结果。
# 例如，如果两条命令都执行的是替换，前一 次替换会影响后一次替换。

########################## 追加:a 命令 ##########################
# a 命令是追加命令，追加将新文本到文件中当前行(即读入模式的缓存区行)的后面。不管是在命令行中，还是在 sed 脚本中，a 命令总是在反斜杠的后面
sed '/^north/a Hello,World!' ../../resources/sed_test.txt

########################## 插入:i 命令 ##########################
# i 命令是插入命令，类似于 a 命令，但不是在当前行后增加文本，而是在当前行前面插 入新的文本，即刚读入缓存区模式的行。
sed '/eastern/i Hello,World! \> -----------------------------------' ../../resources/sed_test.txt
# 命令 i 是插入命令。如果在某一行匹配到模式 eastern,i 命令就在该行的上方插入命令中 插入反斜杠后面后的文本。除了最后一行，

########################## 修改:c 命令 ##########################
# c 命令是修改命令。sed 使用该命令将已有的文本修改成新的文本。旧文本被覆盖。
# c 命令是修改命令。该命令将完整地修改在模式缓冲区行的当前行。如果模式 eastern 被匹配，c 命令将其后的文本替换包含 eastern 的行。
sed '/eastern/c Hello,World! \ -----------------------------------' ../../resources/sed_test.txt

########################## 获取下一行:n 命令 ##########################
# n 命令表示下一条命令。sed 使用该命令获取输入文件的下一行，并将其读入到模式缓 冲区中，任何 sed 命令都将应用到匹配行，紧接着的下一行上。
# 如果在某一行匹配到模式 eastern，n 命令就指示 sed 用下一个输入行(即包含 AM Main Jr 的那行)替换模式空间中的当前行，
# 并用 Archie 替换 AM，然后打印该行，再继续往下处理。
sed '/eastern/{n;s/AM/Archie/;}' ../../resources/sed_test.txt


########################## 转换:y命令 ##########################
# y命令表示转换。该命令与tr命令相似，字符按照一对一的方式从左到右进行转换。例如y/abc/ABC/，会把小写字母转换成大写字母，a-->A,b-->B,c-->C。
sed '1,3y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/' ../../resources/sed_test.txt
# y 命令把 1~3 行中所有的小写命令字母都转换成了大写。正则表达式元字符对 y 命令不起作用。与替分隔符一样，斜杠可以被替换成其他字符。


########################## 退出:q 命令 ##########################
sed '3q' ../../resources/sed_test.txt
# 打印完第 3 行之后，q 让 sed 程序退出。
sed '/Lewis/{s/Lewis/Joseph/;q; }' ../../resources/sed_test.txt
# 在某行匹配到模式 Lewis 时，s 表示先用 Joseph 替换 Lewis，然后 q 命令让 sed 退出。
